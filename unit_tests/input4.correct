INFO: Using the input4.pas file for input
enter <program>
    -->found PROGRAM
    -->found DIVISORS
    -->found ;
    enter <block>
        -->found VAR
        -->found I
        -->found :
        -->found INTEGER
        -->found ;

        -->found N
        -->found :
        -->found INTEGER
        -->found ;

        -->found MODULA
        -->found :
        -->found INTEGER
        -->found ;

        enter <compound_statement>
            -->found BEGIN
            enter <statement>
                enter <assignment>
                    -->found I
                    -->found :=
                    enter <expression>
                        enter <simple expression>
                            enter <term>
                                enter <factor>
                                    -->found 1
                                exit <factor>
                            exit <term>
                        exit <simple expression>
                    exit <expression>
                exit <assignment>
            exit <statement>
            -->found ;
            enter <statement>
                enter <write>
                    -->found WRITE
                    -->found (
                    -->found 'THE DIVISORS OF 100 ARE'
                    -->found )
                exit <write>
            exit <statement>
            -->found ;
            enter <statement>
                enter <while statement>
                    -->found WHILE
                    enter <expression>
                        enter <simple expression>
                            enter <term>
                                enter <factor>
                                    -->found (
                                    enter <expression>
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found I
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                        -->found <
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found 101
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                    exit <expression>
                                    -->found )
                                exit <factor>
                            exit <term>
                        exit <simple expression>
                    exit <expression>
                    enter <statement>
                        enter <compound_statement>
                            -->found BEGIN
                            enter <statement>
                                enter <assignment>
                                    -->found MODULA
                                    -->found :=
                                    enter <expression>
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found 100
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                    exit <expression>
                                exit <assignment>
                            exit <statement>
                            -->found ;
                            enter <statement>
                                enter <while statement>
                                    -->found WHILE
                                    enter <expression>
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found (
                                                    enter <expression>
                                                        enter <simple expression>
                                                            enter <term>
                                                                enter <factor>
                                                                    -->found MODULA
                                                                exit <factor>
                                                            exit <term>
                                                        exit <simple expression>
                                                        -->found >
                                                        enter <simple expression>
                                                            enter <term>
                                                                enter <factor>
                                                                    -->found I
                                                                exit <factor>
                                                            exit <term>
                                                        exit <simple expression>
                                                    exit <expression>
                                                    -->found )
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                    exit <expression>
                                    enter <statement>
                                        enter <assignment>
                                            -->found MODULA
                                            -->found :=
                                            enter <expression>
                                                enter <simple expression>
                                                    enter <term>
                                                        enter <factor>
                                                            -->found MODULA
                                                        exit <factor>
                                                    exit <term>
                                                    -->found -
                                                    enter <term>
                                                        enter <factor>
                                                            -->found I
                                                        exit <factor>
                                                    exit <term>
                                                exit <simple expression>
                                            exit <expression>
                                        exit <assignment>
                                    exit <statement>
                                exit <while statement>
                            exit <statement>
                            -->found ;
                            enter <statement>
                                enter <if statement>
                                    -->found IF
                                    enter <expression>
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found MODULA
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                        -->found =
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found I
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                    exit <expression>
                                    -->found THEN
                                    enter <statement>
                                        enter <write>
                                            -->found WRITE
                                            -->found (
                                            -->found I
                                            -->found )
                                        exit <write>
                                    exit <statement>
                                exit <if statement>
                            exit <statement>
                            -->found ;
                            enter <statement>
                                enter <assignment>
                                    -->found I
                                    -->found :=
                                    enter <expression>
                                        enter <simple expression>
                                            enter <term>
                                                enter <factor>
                                                    -->found I
                                                exit <factor>
                                            exit <term>
                                            -->found +
                                            enter <term>
                                                enter <factor>
                                                    -->found 1
                                                exit <factor>
                                            exit <term>
                                        exit <simple expression>
                                    exit <expression>
                                exit <assignment>
                            exit <statement>
                            -->found END
                        exit <compound_statement>
                    exit <statement>
                exit <while statement>
            exit <statement>
            -->found ;
            enter <statement>
                enter <write>
                    -->found WRITE
                    -->found (
                    -->found 'COMPLETE'
                    -->found )
                exit <write>
            exit <statement>
            -->found END
        exit <compound_statement>
    exit <block>
exit <program>

=== Parse was successful! ===

User Defined Symbols:
I
MODULA
N


*** In order traversal of parse tree ***
Program Name DIVISORS
Begin Compound Statement
Assignment I := expression( simple_expression( term( factor( 1 ) ) ) )
Write String 'THE DIVISORS OF 100 ARE'
While expression( simple_expression( term( nested_expression( expression( simple_expression( term( factor( I ) ) ) < simple_expression( term( factor( 101 ) ) ) ) ) ) ) )
%%%%%%%% Loop Body %%%%%%%%
Begin Compound Statement
Assignment MODULA := expression( simple_expression( term( factor( 100 ) ) ) )
While expression( simple_expression( term( nested_expression( expression( simple_expression( term( factor( MODULA ) ) ) > simple_expression( term( factor( I ) ) ) ) ) ) ) )
%%%%%%%% Loop Body %%%%%%%%
Assignment MODULA := expression( simple_expression( term( factor( MODULA ) ) - term( factor( I ) ) ) )
%%%%%%%%%%%%%%%%%%%%%%%%%%%
If expression( simple_expression( term( factor( MODULA ) ) ) = simple_expression( term( factor( I ) ) ) )
%%%%%%%% True Statement %%%%%%%%
Write Value I
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Assignment I := expression( simple_expression( term( factor( I ) ) + term( factor( 1 ) ) ) )
End Compound Statement
%%%%%%%%%%%%%%%%%%%%%%%%%%%
Write String 'COMPLETE'
End Compound Statement


*** Delete the parse tree ***
Deleting a programNode
Deleting a blockNode
Deleting a compoundNode
Deleting an assignmentNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a writeNode
Deleting a whileNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a compoundNode
Deleting an assignmentNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a whileNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting an assignmentNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a termNode
Deleting a factorNode
Deleting an ifNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a writeNode
Deleting an assignmentNode
Deleting an expressionNode
Deleting a simpleExpressionNode
Deleting a termNode
Deleting a factorNode
Deleting a termNode
Deleting a factorNode
Deleting a writeNode
